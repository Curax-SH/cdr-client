spring:
  main:
    web-application-type: none
  application:
    name: CDR Client
  output:
    ansi:
      enabled: detect
  profiles:
    include:
      - client
  task:
    scheduling:
      pool:
        size: 5
      shutdown:
        # Spring's default shutdown behavior is to wait for scheduled tasks to finish and once all tasks have finished, to shut down the task executor.
        # In the absence of exceptions our scheduled tasks never finish as they are the source of a "hot" kotlin flow. In order to avoid the delay in
        # the application shutdown while Spring waits for the task executor to shut down (and a stacktrace in the logs at the end of the wait time),
        # we need to tell Spring to cancel the tasks themselves, and to do so immediately.
        # In our case this means cancellation of the CoroutineScope we are running the tasks in; this should translate into a graceful shutdown of the client.
        await-termination-period: 0s
        await-termination: true
  jmx:
    enabled: false

# You need to set the `web-application-type` to `servlet` or `reactive` to enable the web server (for actuators like `health`)
#server:
#  address: 0.0.0.0
#  port: 8080
#  shutdown: "graceful"
#  servlet:
#    encoding:
#      charset: UTF-8
#      enabled: true
#      force: true
#  tomcat:
#    connection-timeout: 1s
#    keep-alive-timeout: 30s

management:
# You need to set the `web-application-type` to `servlet` or `reactive` to enable the actuators
#  endpoints:
#    web:
#      exposure:
#        include: "actuator,health"
#    enabled-by-default: true
  tracing:
    sampling:
      # sampling has to be disabled; if enabled we create a memory leak as there is no way to guarantee a sampled span gets closed and releases its resources
      # when used in asynchronous Kotlin flows/coroutines
      probability: 0.0
    enabled: false # we manage our own tracing via the micrometer api

logging:
  pattern:
    correlation: "%correlationId" # would be added automatically if we had not disabled tracing
    dateformat: "\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", UTC"
  level:
    root: INFO
  charset:
    console: UTF-8
    file: UTF-8
  logback:
    rollingpolicy:
      max-file-size: 100MB