[versions]
jdk="17"
kotlin = "2.1.10"
kotlinLogging = "7.0.3"
kotlinxCoroutines = "1.10.1"
detekt = "1.23.7"
awaitility="4.2.2"
jacoco="0.8.12"
kache="2.1.0"
kfsWatch="1.3.0"
logstashEncoder="8.0"
mockk="1.13.14"
springMockk="4.0.2"
msal4j="1.18.0"
okHttp="4.12.0"
springCloud="2024.0.0"
springBoot="3.4.2"
springDependencyManagement="1.1.7"
dockerCompose="0.17.12"


[libraries]
kache = { group = "com.mayakapps.kache", name = "kache", version.ref = "kache" }
msal4j = { group = "com.microsoft.azure", name = "msal4j", version.ref = "msal4j" }
okhttp = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okHttp" }
kfswatch = { group = "io.github.irgaly.kfswatch", name = "kfswatch", version.ref = "kfsWatch" }
kotlinLogging = { group = "io.github.oshai", name = "kotlin-logging", version.ref = "kotlinLogging" }
microMeterTracing = { group = "io.micrometer", name = "micrometer-tracing" }
microMeterTracingBridgeOtel = { group = "io.micrometer", name = "micrometer-tracing-bridge-otel" }
logstashEncoder = { group = "net.logstash.logback", name = "logstash-logback-encoder", version.ref = "logstashEncoder" }
kotlinReflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect", version.ref = "kotlin" }
kotlinStdlib = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib", version.ref = "kotlin" }
kotlinxCoroutinesCore = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinxCoroutinesReactor = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-reactor", version.ref = "kotlinxCoroutines" }
springBootDependencies = { group = "org.springframework.boot", name = "spring-boot-dependencies", version.ref = "springBoot" }
springBootStarterActuator = { group = "org.springframework.boot", name = "spring-boot-starter-actuator" }
springBootStarterWeb = { group = "org.springframework.boot", name = "spring-boot-starter-web" }
springRetry = { group = "org.springframework.retry", name = "spring-retry" }
springCloudDependencies = { group = "org.springframework.cloud", name = "spring-cloud-dependencies", version.ref = "springCloud" }
springCloudContext = { group = "org.springframework.cloud", name = "spring-cloud-context" }
jacksonDataformatYaml = { group = "com.fasterxml.jackson.dataformat", name = "jackson-dataformat-yaml" }
#### TEST DEPENDENCIES ####
jacocoCore = { group = "org.jacoco", name = "org.jacoco.core", version.ref = "jacoco" }
springBootStarterTest = { group = "org.springframework.boot", name = "spring-boot-starter-test" }
kotlinxCoroutinesTest = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-test" }
mockWebServer = { group = "com.squareup.okhttp3", name = "mockwebserver", version.ref = "okHttp" }
mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }
junitJupiter = { group = "org.junit.jupiter", name = "junit-jupiter" }
micrometerTracingTest = { group = "io.micrometer", name = "micrometer-tracing-test" }
springMockk = { group = "com.ninja-squad", name = "springmockk", version.ref = "springMockk" }
awaitility = { group = "org.awaitility", name = "awaitility", version.ref = "awaitility" }

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
dockerCompose = { id = "com.avast.gradle.docker-compose", version.ref = "dockerCompose" }
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
springDependencyManagement = { id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }
